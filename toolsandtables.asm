;--------------------------------------------------------------------------------------
; Tools And Tables
;--------------------------------------------------------------------------------------


            ;-----------------------------------------------------
            ; fetch new shot advance value. generalized

shottempdir byte  $00
shottempstp byte  $00
advanceval  byte  $00   ;keeps the current byte to being added to shot position
adv_hold    byte  $00

            ;-----------------------------------------------------

mk_advancevalx    ;requires to be passed shottempdir and shottempstep

            ldx   shottempdir       ;load shot angle value
            lda   s_trlatex,x       ;translate to nifty new table
            tax

            lda   shottabaddrlo,x
            sta   readouterx+1
            lda   shottabaddrhi,x
            sta   readouterx+2

            ldx   shottempstp
readouterx  lda   $1234,x           ;get raw advance value from table

            sta   adv_hold          ;store
            lda   shottempdir       ;load current shot direction
            lsr
            lsr
            lsr
            lsr
            lsr
            tax
            lda   s_replacex,x         
            clc
            adc   adv_hold
            sta   advanceval        ;generally used
            rts

            ;------

mk_advancevaly    ;because of the sin cosine relation these routines need ro read differently
                  ;shifted replacement tables. it is complicated.

            ldx   shottempdir       ;load shot angle value
            lda   s_trlatey,x       ;translate to nifty new table
            tax

            lda   shottabaddrlo,x
            sta   readoutery+1
            lda   shottabaddrhi,x
            sta   readoutery+2
            
            ldx   shottempstp
readoutery  lda   $1234,x           ;get raw advance value from table

            sta   adv_hold          ;store
            lda   shottempdir       ;load current shot direction
            lsr
            lsr
            lsr
            lsr
            lsr
            tax
            lda   s_replacey,x      
            clc
            adc   adv_hold
            sta   advanceval        ;generally used
            rts

;-----------------------------------------------------------------------------

            ;----------------------------------------------------------
            ; make the shot faster. general routine.

turbobullet beq   turbohole

            bmi   more_neg
            
            clc
            adc   #$05
            
turbohole   rts
more_neg    
            sec
            sbc   #$05
            
            rts


;--------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------

scrcol      ;-------------------------
            
            lda   border_col
            sta   $d020  
            lda   screen_col     
            sta   $d021       

            lda   multi0_col
            sta   $d022
            lda   multi1_col
            sta   $d023

            rts

;--------------------------------------------------------------------------------------

dk_cls      ldy   #$00        ; clear screen & color

            lda   #$ff
dk_clr      sta   screen_01,y     
            sta   screen_01+256,y     
            sta   screen_01+512,y     
            iny
            bne   dk_clr        

            lda   #$00
dk_clr1     sta   cram_01,y     
            sta   cram_01+256,y     
            sta   cram_01+512,y     
            iny
            bne   dk_clr1

            ldx   #$e8
            lda   #$ff
dk_clr2     sta   screen_01+768,y
            iny
            dex
            bne   dk_clr2        

            ldx   #$e9
            lda   #$00
dk_clr3     sta   cram_01+768,y
            dey
            dex
            bne   dk_clr3        

            rts

;--------------------------------------------------------------------------------------

cls         ldy   #$00        ; clear screen & color

            lda   clschar
clr         sta   screen_01,y     
            sta   screen_01+256,y     
            sta   screen_01+512,y     
            iny
            bne   clr        

            lda   clscol
clr1        sta   cram_01,y     
            sta   cram_01+256,y     
            sta   cram_01+512,y     
            iny
            bne   clr1

            ldx   #$e8
            lda   clschar
clr2        sta   screen_01+768,y
            iny
            dex
            bne   clr2        

            ldx   #$e9
            lda   clscol
clr3        sta   cram_01+768,y
            dey
            dex
            bne   clr3        

            rts

;--------------------------------------------------------------------------------------

setfont     lda   #%00000011 ;<- your desired VIC bank value
            sta   $DD00

            lda   #%00011110 ;screenmem at $0400, font at $3800
            sta   $d018      

desixteen   lda   #%11001000 ;multicolor mode is off (bit4 of 0-7)
            sta   $d016
            rts            

;--------------------------------------------------------------------------------------

initsprites lda   players8g
            sta   players8

            ldx   #$0f

iniini      lda   sprxini,x
            sta   sprx,x
            dex
            bpl   iniini

scolini     ldx   #$07
scolilp     lda   sprcolini,x
            sta   sprcol,x
            dex
            bpl   scolilp

            ;-----------------------

            ldx   #$00
            ldy   #$00

spr_stuplp  lda   sprx,x     
            sta   $d000,y     
            
            lda   spry,x
            sta   $d001,y
     
            lda   sprcol,x
            sta   $d027,x     
            
            lda   initbank,x
            sta   screen_01+1016,x     

            lda   sprmulcol0        
            sta   $d025       
            lda   sprmulcol1        
            sta   $d026
            
            iny
            iny
            inx
            cpx   #$08        
            bne   spr_stuplp

            lda   sprx+1
            sta   player1x
            lda   spry+1
            sta   player1y

            lda   sprx+5
            sta   player2x
            lda   spry+5
            sta   player2y

            lda   players8    ;sprite x bit 8 
            sta   $d010                  

            lda   #%00000000  ;sprites infront gfx     
            sta   $d01b 

            lda   #%01100110  ;sprites multicol
            sta   $d01c       

            lda   #%00000000  ;xstretch
            sta   $d01d       
            lda   #%00000000  ;ystretch
            sta   $d017       

            lda   #%11111111  ;sprite enable
            sta   $d015       
            rts

;--------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------

            ;------------------------------------------------------------
genfont     ;same code as Bla-Derunner from 256b Font Compo on CSdB 2018

            lda     #$33
            sta     $01

            lda     #$d0
            sta     $fd
            lda     #$38      ;<---- target hibyte
            sta     $ff

            ldx     #$08
            ldy     #$00
            sty     $fc
            sty     $fe
            sty     $fb

gf_copeh    lda     ($fc),y
            sta     $fa

            lda     intro
            beq     gf_skipple

            lda     #$01
            eor     $fb
            sta     $fb
            beq     gf_blnd

gf_skipple  lda     $fa
gf_reins    sta     ($fe),y
            iny
            bne     gf_copeh
            inc     $fd
            inc     $ff
            dex
            bne     gf_copeh

            lda     #$37
            sta     $01
            rts

gf_blnd     ror     gf_mask+1
            lda     $fa
            beq     gf_ex 
gf_mask     and     #%10100001
gf_ex       jmp     gf_reins

            ;------------------------------------------------------------


bginsert    byte  %00000000
            byte  %00001000
            byte  %00100000
            byte  %00011010
            byte  %01011000
            byte  %00000100
            byte  %00010000
            byte  %00000000


;--------------------------------------------------------------------------------------
; number to ascii

            ; pass hex number in a
            ; pass x offset for printing in x
            ; y is unaffected
            ; a returned as is

            ; A = *SCII-code
hex2screen  pha ;1
            stx h2s_tmp1
            sty h2s_tmp2

            ldy #$2f
            ldx #$3a
            sec
h2s_lp1     iny
            sbc #100
            bcs h2s_lp1
h2s_lp2     dex
            adc #10
            bmi h2s_lp2
            adc #$2f

            pha ;2
            txa
            pha ;3
            tya
            pha ;4

            ldx h2s_tmp1
            pla ;3
            sta screen_01,x
            pla ;2
            sta screen_01+1,x
            pla ;1
            sta screen_01+2,x

            ldy h2s_tmp2
            pla ;0
            rts
            text  'tiny .a to ascii by white flame / codebase64'            
h2s_tmp1    byte 0
h2s_tmp2    byte 0

;--------------------------------------------------------------------------------------

orbx       
            ;64 values sine amplitude $5f                                              
            ;original max distance is $2f. this table is x2 so values must be LSRd once
            byte  $00,$00,$00,$01,  $01,$01,$02,$03,  $04,$05,$06,$07,  $08,$09,$0b,$0c ;16
            byte  $0e,$10,$11,$13,  $15,$17,$19,$1b,  $1d,$1f,$22,$24,  $26,$29,$2b,$2d ;32
            byte  $30,$32,$34,$36,  $39,$3b,$3d,$40,  $42,$44,$46,$48,  $4a,$4c,$4e,$4f ;48
            byte  $51,$53,$54,$56,  $57,$58,$59,$5a,  $5b,$5c,$5d,$5e,  $5e,$5e,$5f,$5f ;64

            byte  $5f,$5f,$5f,$5e,  $5e,$5e,$5d,$5c,  $5b,$5a,$59,$58,  $57,$56,$54,$53 ;80
            byte  $51,$4f,$4e,$4c,  $4a,$48,$46,$44,  $42,$40,$3d,$3b,  $39,$36,$34,$32 ;96
            byte  $30,$2d,$2b,$29,  $26,$24,$22,$1f,  $1d,$1b,$19,$17,  $15,$13,$11,$10 ;112
            byte  $0e,$0c,$0b,$09,  $08,$07,$06,$05,  $04,$03,$02,$01,  $01,$01,$00,$00 ;128

            ;repeat for cos
            byte  $00,$00,$00,$01,  $01,$01,$02,$03,  $04,$05,$06,$07,  $08,$09,$0b,$0c ;144
            byte  $0e,$10,$11,$13,  $15,$17,$19,$1b,  $1d,$1f,$22,$24,  $26,$29,$2b,$2d ;160
            byte  $30,$32,$34,$36,  $39,$3b,$3d,$40,  $42,$44,$46,$48,  $4a,$4c,$4e,$4f ;176
            byte  $51,$53,$54,$56,  $57,$58,$59,$5a,  $5b,$5c,$5d,$5e,  $5e,$5e,$5f,$5f ;192 (c0)


;--------------------------------------------------------------------------------------
*=$1f00
                  ; forbidden y positions for sprites in the intro - can it get any easier?
i_wr_exclude      byte $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f ;0
                  byte $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f ;1
                  byte $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f ;2
                  byte $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f ;3
                  byte $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f ;4
                  byte $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f ;5 
                  byte $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f ;6
                  byte $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f ;7
                  byte $80,$81,$82,$83,$84,$85,$86,$87,$88,$00,$00,$00,$00,$00,$00,$00 ;8
                  byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;9 ;$9a lower part irq
                  byte $00,$00,$00,$a3,$a4,$a5,$a6,$a7,$a8,$a9,$aa,$ab,$ac,$ad,$ae,$af ;a
                  byte $b0,$b1,$b2,$b3,$b4,$b5,$b6,$b7,$b8,$b9,$ba,$bb,$bc,$bd,$be,$bf ;b
                  byte $c0,$c1,$c2,$c3,$c4,$c5,$c6,$c7,$c8,$c9,$ca,$cb,$cc,$cd,$ce,$cf ;c
                  byte $d0,$d1,$d2,$d3,$d4,$d5,$d6,$d7,$d8,$d9,$da,$db,$dc,$dd,$de,$df ;d
                  byte $e0,$e1,$e2,$e3,$e4,$e5,$e6,$e7,$e8,$e9,$ea,$eb,$ec,$ed,$ee,$ef ;e
                  byte $f0,$f1,$f2,$f3,$f4,$f5,$f6,$f7,$f8,$f9,$fa,$fb,$fc,$fd,$fe,$ff ;f


;--------------------------------------------------------------------------------------

*=$2000

msg_fight1        byte  $01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$00,$00,$01,$01,$01,$01,$01,$00,$01,$01,$00,$00,$01,$01,$00,$01,$01,$01,$01,$01,$01,$00,$01,$01
msg_fight2        byte  $01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$00,$01,$01,$00,$00,$01,$01,$00,$01,$01,$01,$01,$01,$01,$00,$01,$01
msg_fight3        byte  $01,$01,$00,$00,$00,$00,$00,$01,$01,$00,$00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$00,$00,$00,$01,$01,$00,$00,$00,$01,$01
msg_fight4        byte  $01,$01,$01,$01,$00,$00,$00,$01,$01,$00,$00,$01,$01,$00,$00,$01,$01,$00,$01,$01,$01,$01,$01,$01,$00,$00,$00,$01,$01,$00,$00,$00,$01,$01
msg_fight5        byte  $01,$01,$01,$01,$00,$00,$00,$01,$01,$00,$00,$01,$01,$00,$00,$01,$01,$00,$01,$01,$00,$00,$01,$01,$00,$00,$00,$01,$01,$00,$00,$00,$01,$01
msg_fight6        byte  $01,$01,$00,$00,$00,$00,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$00,$01,$01,$00,$00,$01,$01,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
msg_fight7        byte  $01,$01,$00,$00,$00,$00,$01,$01,$01,$01,$00,$00,$01,$01,$01,$01,$01,$00,$01,$01,$00,$00,$01,$01,$00,$00,$00,$01,$01,$00,$00,$00,$01,$01


;--------------------------------------------------------------------------------------

*=$2100
                  ;$1f adresses, according to translate table
shottabaddrhi     byte $23,$23,$23,$23,$23,$23,$23,$23, $24,$24,$24,$24,$24,$24,$24,$24
                  byte $25,$25,$25,$25,$25,$25,$25,$25, $26,$26,$26,$26,$26,$26,$26,$26
shottabaddrlo     byte $00,$20,$40,$60,$80,$a0,$c0,$e0, $00,$20,$40,$60,$80,$a0,$c0,$e0
                  byte $00,$20,$40,$60,$80,$a0,$c0,$e0, $00,$20,$40,$60,$80,$a0,$c0,$e0


s_trlatex         byte $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f ;neg to zero
                  byte $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f ;32
                  byte $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f ;zero to pos
                  byte $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f ;64
                  byte $1f,$1e,$1d,$1c,$1b,$1a,$19,$18,$17,$16,$15,$14,$13,$12,$11,$10 ;pos to zero
                  byte $0f,$0e,$0d,$0c,$0b,$0a,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00 ;88
s_trlatey         byte $1f,$1e,$1d,$1c,$1b,$1a,$19,$18,$17,$16,$15,$14,$13,$12,$11,$10 ;zero to neg
                  byte $0f,$0e,$0d,$0c,$0b,$0a,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00 ;128
                  byte $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f ;neg to zero
                  byte $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f ;
                  byte $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f ;zero to pos
                  byte $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f ;
                  byte $1f,$1e,$1d,$1c,$1b,$1a,$19,$18,$17,$16,$15,$14,$13,$12,$11,$10 ;pos to zero
                  byte $0f,$0e,$0d,$0c,$0b,$0a,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00 ;128

s_replacex        ;adc this to get correct values. angle lsr5 = 0 to 3
                  byte $ff,$00,$00,$ff 

s_replacey        ;adc this to get correct values. angle lsr5 = 0 to 3
                  byte $ff,$ff,$00,$00 

;--------------------------------------------------------------------------------------

                  ;screen-adressen
screenloclo       byte    $00,$28,$50,$78,$a0,$c8,$f0,$18,$40,$68,$90,$b8,$e0,$08,$30,$58,$80,$a8,$d0,$f8,$20,$48,$70,$98,$c0,$ff
screenlochi       byte    $04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$ff

;--------------------------------------------------------------------------------------

*=$2300
s_table
                  ;     0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f   0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f  
                  byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;0
                  byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;1
                  byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;2
                  byte $00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00 ;3
                  byte $00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00 ;4
                  byte $00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00 ;5
                  byte $00,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00,$00 ;6
                  byte $00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$01,$00,$00,$00,$00 ;7
                  byte $00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00,$00 ;8
                  byte $00,$00,$01,$00,$00,$01,$00,$00,$00,$01,$00,$00,$01,$00,$00,$01,$00,$00,$01,$00,$00,$01,$00,$00,$00,$01,$00,$00,$01,$00,$00,$00 ;9
                  byte $00,$00,$01,$00,$00,$01,$00,$00,$01,$00,$00,$01,$00,$00,$01,$00,$01,$00,$00,$01,$00,$00,$01,$00,$00,$01,$00,$00,$01,$00,$00,$00 ;a
                  byte $00,$00,$01,$00,$01,$00,$00,$01,$00,$00,$01,$00,$01,$00,$00,$01,$00,$00,$01,$00,$01,$00,$00,$01,$00,$00,$01,$00,$01,$00,$00,$01 ;b
                  byte $00,$01,$00,$00,$01,$00,$01,$00,$00,$01,$00,$01,$00,$00,$01,$00,$01,$00,$00,$01,$00,$01,$00,$00,$01,$00,$01,$00,$00,$01,$00,$00 ;c
                  byte $00,$01,$00,$00,$01,$00,$01,$00,$01,$00,$01,$00,$00,$01,$00,$01,$00,$01,$00,$00,$01,$00,$01,$00,$01,$00,$01,$00,$00,$01,$00,$00 ;d
                  byte $00,$01,$00,$01,$00,$01,$00,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$00,$01,$00,$01,$00,$01,$00,$00 ;e
                  byte $00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$00 ;f
                  byte $00,$01,$00,$01,$00,$01,$00,$01,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$00,$01,$01,$00,$01,$00,$01,$00,$01,$00,$00 ;0
                  byte $00,$01,$00,$01,$01,$00,$01,$00,$01,$00,$01,$01,$00,$01,$00,$01,$00,$01,$00,$01,$01,$00,$01,$00,$01,$00,$01,$01,$00,$01,$00,$00 ;1
                  byte $00,$01,$01,$00,$01,$00,$01,$01,$00,$01,$00,$01,$01,$00,$01,$00,$01,$00,$01,$01,$00,$01,$00,$01,$01,$00,$01,$00,$01,$01,$00,$01 ;2
                  byte $00,$01,$01,$00,$01,$01,$00,$01,$00,$01,$01,$00,$01,$01,$00,$01,$00,$01,$01,$00,$01,$01,$00,$01,$00,$01,$01,$00,$01,$01,$00,$00 ;3
                  byte $00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$00 ;4
                  byte $01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$01,$00,$01,$00 ;5
                  byte $01,$00,$01,$01,$00,$01,$01,$01,$00,$01,$01,$00,$01,$01,$01,$00,$01,$01,$01,$00,$01,$01,$00,$01,$01,$01,$00,$01,$01,$00,$01,$01 ;6
                  byte $01,$00,$01,$01,$01,$00,$01,$01,$01,$00,$01,$01,$01,$00,$01,$01,$01,$00,$01,$01,$01,$00,$01,$01,$01,$00,$01,$01,$01,$00,$01,$00 ;7
                  byte $01,$00,$01,$01,$01,$01,$00,$01,$01,$01,$00,$01,$01,$01,$01,$00,$01,$01,$01,$01,$00,$01,$01,$01,$00,$01,$01,$01,$01,$00,$01,$00 ;8
                  byte $01,$01,$00,$01,$01,$01,$01,$00,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$00,$01,$01,$01,$01,$00,$01,$01,$00 ;9
                  byte $01,$01,$00,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01 ;a
                  byte $01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01 ;b
                  byte $01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$00 ;c
                  byte $01,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$01,$00 ;d
                  byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01 ;e
                  byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00 ;f

;--------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------
;--------------------------------------------------------------------------------------
